\documentclass[a4paper]{article}

\def\likeLTD{\textsc{LikeLTD}} 

%\VignetteIndexEntry{Using the likeLTD peak heights model}
\title{Using the \likeLTD peak heights model}
\author{Christopher Steele}
\author{Mayeul d'Avezac}
\author{Adrian Timpson}
\author{James Hetherington}
\author{David Balding}

\begin{document}
\maketitle
<<setthreads, echo=FALSE>>=
  if(.Call(likeLTD::.cpp.nbthreads) > 2) {
    .Call(likeLTD::.cpp.set_nbthreads, as.integer(2))
  }
@

This vignette assumes familiarity with both programming in R and forensic DNA analysis, only demonstrating how to run an analysis. For a more in depth discussion of \likeLTD see {\tt likePHguide.pdf} provided with the package.

\section{Inputs}
To evaluate the weight-of-evidence (WoE) against a queried contributor (Q), the user must supply a crime-stain profile (CSP), at least one reference profile and an allele frequency database for at least one population of interest. A number of allele frequency databases are supplied with \likeLTD, spanning the NGMSelect ({\tt DNA17}), SGM+ ({\tt SGMplus}) and Identifiler ({\tt Identifiler}) STR profiling kits, but the user may specify their own database. Similarly, the case shown here uses example CSP and reference profile files supplied with \likeLTD, but the user may specify their own.  

<<inputs, eval=FALSE, tidy=FALSE, print=FALSE>>=
  require(likeLTD)

  # Case we are going to be evaluating
  caseName = "laboratory"
  datapath = file.path(system.file("extdata", package="likeLTD"),caseName)

  # File paths and case name for allele report
  admin = pack.admin.input.peaks(
            peaksFile = file.path(datapath, paste0(caseName,'-CSP.csv')),
            refFile = file.path(datapath, paste0(caseName,'-reference.csv')),
            caseName = caseName,
            detectionThresh = 20
             )
@
<<alleleReport, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Generate allele report
  allele.report.peaks(admin)
@

The important arguments to {\tt pack.admin.input.peaks} are:

\begin{description}
\item[peaksFile:] Path to CSP file in the same format as {\tt laboratory-CSP.csv}. May contain multiple replicates.
\item[refFile:] Path to reference file in the same format as {\tt laboratory-reference.csv}. May contain multiple reference profiles.
\item[databaseFile:] Path to database file. Only used if {\tt kit=NULL}. Must contain a LUS column. 
\item[kit:] One of {\tt "DNA17"},{\tt "SGMplus"},{\tt "Identifiler"} or {\tt NULL}. If both {\tt databaseFile} and {\tt kit} are {\tt NULL}, the DNA17 database is used as default. 
\item[linkageFile:] File of pairwise recombination rates between loci. If {\tt NULL} the default supplied with \likeLTD is used. This is only used when Q and X are assumed related. 
\item[detectionThresh:] The detection threshold used to analyse the electrophoresis results. Defaults to 30 RFU.
\end{description}

The allele report generated by \likeLTD gives suggestions on the the number of unprofiled contributors to include in the analysis, and on whether or not to model dropin.

\section{Hypothesis generation}

Based on the suggestions of the allele report, or through manual inspection, the user must decide on a set of arguments to pass to \likeLTD when generating the prosecution and defence hypothesese.

<<hyps, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Enter arguments
  args = list(
        nUnknowns = 1,
        doDropin = FALSE,
        ethnic = "NDU1",
        adj = 1,
        fst = 0.03,
        relationship = 0
        )

  # Create hypotheses
  hypP = do.call(prosecution.hypothesis.peaks, append(admin,args))
  hypD = do.call(defence.hypothesis.peaks, append(admin,args))
@

The arguments that may be handed to either {\tt prosecution.hypothesis.peaks} or {\tt defence.hypothesis.peaks} are:

\begin{description}
\item[nUnknowns:] The number of unprofiled contributor to include under $H_p$. $H_d$ automatically adds an unprofiled contributor, X, that replaces Q. Allele report suggests a value for this parameter. nUnknowns must be between 0 and 2. Defaults to 0. 
\item[doDropin:] Logical, whether or not to model dropin. Suggested by allele report. Defaults to {\tt FALSE}. 
\item[ethnic:] Which database to use. Must match a column heading in the chosen database file. Defaults to {\tt "NDU1"}.
\item[adj:] Sampling adjustment. Defaults to 1. 
\item[fst:] Fixation index, accounts for distant relatedness between Q and X. Defaults to 0.03.
\item[relationship:] Assumed relationship between Q and X. Can take values between 0 and 7:
	\begin{enumerate}
	\item Unrelated.
	\item Parent/offspring.
	\item Siblings.
	\item Uncle/nephew or aunt/niece.
	\item Half-uncle/half-nephew or half-aunt/half-niece.
	\item Cousins.
	\item Grandparent/grandchild.
	\item Half-siblings.
	\end{enumerate}
\item[doDoubleStutter:] Logical, whether or not to model double stutter. Defaults to {\tt TRUE}. 
\item[doOverStutter:] Logical, whether or not to model over stutter. Defaults to {\tt TRUE}. 
\item[combineRare:] Logical, whether or not to combine unobserved alleles into a single allele. Defaults to {\tt TRUE}. 
\item[rareThreshold:] If {\tt combineRare=TRUE}, this parameter gives the population allele probability below which all unobserved alleles are combined. Defaults to 1 (all unobserved alleles). 
\end{description}


\section{Optimisation}

Once the hypotheses have been generated, the next step is to create the likelihood functions along with their associated parameters for optimisation, and then to perform the optimisation.

<<optimise, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Generate likelihood functions and optimisation parameters
  paramsP = optimisation.params.peaks(hypP,verbose=FALSE)
  paramsD = optimisation.params.peaks(hypD,verbose=FALSE)

  # reduce number of iterations for demonstration purposes
  paramsP$control$itermax=25
  paramsD$control$itermax=25

  # Run optimisation
  results = evaluate.peaks(paramsP, paramsD, n.steps=1, converge=FALSE)
@

Here {\tt n.steps} and {\tt converge} are specified to reduce run-time for demonstration purposes; if unspecified {\tt evaluate.peaks} determines the number of steps after the first step has completed. Other parameters the user may wish to pass to {\tt evaluate.peaks} include:

\begin{description}
\item[interim:] Logical, whether or not to generate interim reports after every step of optimisation. Defaults to FALSE. 
\item[seed.input:] Integer specification of a seed to use before optimisation. If unspecified, \likeLTD uses a numeric representation of the current time and date. 
\end{description}

The behaviour of the optimisation algorithm may be modified by specifying {\tt tolerance}, {\tt CR.start}, {\tt CR.end} and {\tt nConverged}, although we do not recommend altering these parameters. 

\section{Generate output report}

Once optimisation has been completed, an output report summarising the results can be generated. 

<<output, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Generate output report
  output.report.peaks(hypP,hypD,results)
@


\section{Likely genotypes}

Following optimisation it is possible to return the most likely marginal or joint genotypes under $H_p$ or $H_d$.

<<likely, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Get the most likely single-contributor genotypes
  gensMarginal = get.likely.genotypes.peaks(hypD,paramsD,results$Def)
  # Return joint genotypes and probabilities
  gensJoint = get.likely.genotypes.peaks(hypD,paramsD,results$Def,joint=TRUE)
@

It is also possible to return the full posterior likelihoods for each genotype combination unedr the specified hypothesis. 

<<posterior, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Get the posterior likelihoods for all genotype combinations
  gensMarginal = get.likely.genotypes.peaks(hypD,paramsD,results$Def,posterior=TRUE)
@

\section{Diagnostic}

A visual inspection of the fit of the optimised parameters to the supplied CSP data can be performed using the {\tt peaks.results.plot} function, which plots the 95\% CI of the gamma distribution given the optimised parameters, assuming the genotype that is most likely. 

<<diagnose, eval=FALSE, tidy=FALSE, print=FALSE>>=
  # Plot CSP with most likely genotypes
  peaks.results.plot(hypD,results$Def,replicate=1)
@

<<run,echo=FALSE,include=FALSE>>=
<<inputs>>
<<hyps>>
<<optimise>>
@

<<plot,echo=FALSE>>=
<<diagnose>>
@

\end{document}
